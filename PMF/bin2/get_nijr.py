'''
#=============================================================================
#     FileName: get_nijr.py
#         Desc: 
#       Author: jlpeng
#        Email: jlpeng1201@gmail.com
#     HomePage: 
#      Version: 0.0.1
#   LastChange: 2014-08-21 01:53:49
#      History:
#=============================================================================
'''
import sys
import os
from glob import glob
import dist


def do_for_each(name, outf):
	pairs = {}   #key=(i,j), value='number of times'
	inf = open(name, "r")
	for line in inf:
		ltype,lidx,ptype,pidx,d = line.strip().split(",")
		pair_type = ltype + '-' + ptype
		if pair_type not in dist.DC_TYPES:
			print "Atom pair type %s has not been defined"%pair_type
			continue
		i = dist.DC_TYPES.index(pair_type)
		d = float(d)
		if d >= 12.0:
			continue
		j = int((d-dist.D_MIN*0.1) / dist.D_DELT * 10.0)
		if not pairs.has_key((i,j)):
			pairs[(i,j)] = 0
		pairs[(i,j)] += 1
	inf.close()
	outf.write(name)
	for key,value in pairs.iteritems():
		outf.write(" %d,%d,%d"%(key[0],key[1],value))
	outf.write("\n")


def main(argv=sys.argv):
	if len(argv) < 3:
		print "\n  Usage: get_nijr.py output in.num[...]"
		print "  in.num: generated by `pmf_atom_pairs`"
		print "  output: each line will be `name i,j,n ...`"
		print "          where `i` is the mapping of 'LIG_PRO' pair type,"
		print "          `j` is the mapping of distance between ligand and protein atom,"
		print "          `n` is the number of times it appears in {name}"
		print "  Finally, you can map `i,j` to `j*len(DC_TYPES)+i`"
		print ""
		sys.exit(1)
	
	if os.path.exists(argv[1]):
		print "Warning: %s already exists. Are you sure specified the {output} file?"%argv[1]
		sys.exit(1)
	outf = open(argv[1],"w")
	print >>outf, "len(DC_TYPES)=%d, num_of_bins=%d"%(len(dist.DC_TYPES), int(12/0.2))
	for name in argv[2:]:
		for item in glob(name):
			do_for_each(item, outf)
	outf.close()

main()


