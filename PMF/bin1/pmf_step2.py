'''
#=============================================================================
#     FileName: pmf_step2.py
#         Desc: 
#       Author: jlpeng
#        Email: jlpeng1201@gmail.com
#     HomePage: 
#      Created: 2014-03-24 14:55:21
#   LastChange: 2014-07-07 11:18:54
#      History:
#=============================================================================
'''
import sys
from getopt import getopt
from glob import glob
import pickle
import pmf

def main(argv=sys.argv):
    if len(argv) not in (4,5,6,7,8):
        print "\nOBJ:"
        print "  to calculate numbers of atom pair ij by summation over"
        print "  all complexes, OR to calculate atom pair potential A_{ij}(r).\n"
        print "  for each atom pairs, A_{ij}(r) = -k_{B}*T*ln(g_{ij}(r))"
        print "  where, g_{ij}(r) = f_{vol_corr}(r) * rho_ij(r) / rho_ij_bulk"
        print "         rho_ij(r) = \\frac{\\sum_{m}{n_ijm(r)}}{vol_shell(r,dr)}"
        print "         rho_ij_bulk = \\frac{\\sum_m{N_ijm}}{vol_bulk}"
        print "         f_{vol_corr}(r) is volume correction factor"
        print "  both atom pair potential with and without volume correction"
        print "  factor will be generated"
        print "\nUsage:"
        print "  %s [options] output"%argv[0]
        print "\n[Options]"
        print "  -f file: generated by 'pmf_step1.py'"
        print "  -l file: each line of which contains file name generated by 'pmf_step1.py'"
        print "  -p: if given, to calculate pair potentials instead"
        print "  (by default, to calculate numbers of atom pair ij)"
        print "  --text: if given, to save results in plain text"
        print "          otherwise, using pickle.dump"
        print "  output: where to save results"
        print ""
        sys.exit(1)

    opts,args = getopt(argv[1:],'f:l:p',["text"])
    assert len(args) == 1

    file_name = None
    list_name = None
    pair_potential = False
    text = False
    for opt,val in opts:
        if opt == "-f":
            file_name = val
        elif opt == "-l":
            list_name = val
        elif opt == "-p":
            pair_potential = True
        elif opt == "--text":
            text = True
        else:
            print "Error: invalid option",opt
            sys.exit(1)
    if file_name is None and list_name is None:
        print "Error: either -l or -f is needed"
        sys.exit(1)

    ap = pmf.NumAtomPairs()
    if file_name is not None:
        map(ap.update, glob(file_name))

    if list_name is not None:
        inf = open(list_name,"r")
        for line in inf:
            if line.strip()=="" or line.startswith('#'):
                continue
            map(ap.update, glob(line.strip()))
        inf.close()

    p = None
    if pair_potential:
        p = pmf.Potential()
        p.construct(ap)

    if text:
        if p is not None:
            p.write(args[0])
        else:
            ap.write(args[0])
    else:
        outf = open(args[0], "w")
        if p is not None:
            pickle.dump(p, outf)
        else:
            pickle.dump(ap, outf)
        outf.close()


main()

