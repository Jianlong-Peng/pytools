'''
#=============================================================================
#     FileName: pmf_score.py
#         Desc: 
#       Author: jlpeng
#        Email: jlpeng1201@gmail.com
#     HomePage: 
#      Created: 2014-07-22 13:42:56
#   LastChange: 2014-07-22 14:03:45
#      History:
#=============================================================================
'''
import sys
import pickle
from getopt import getopt
import pmf

def main(argv=sys.argv):
    if len(argv) not in (5,7) :
        print "\nOBJ:"
        print "  to score each protein-ligand complex using PMF"
        print "  score = \sum_ijr{A_ij(r) * n_ij(r)}"
        print "\nUsage:"
        print "  %s [options] > out.txt"%argv[0]
        print "\n[options]"
        print "  -p potential.dat: generated by pmf_step2.py"
        print "                    provides A_ij(r)"
        print "  -f file.txt     : generated by pmf_step1.py"
        print "  -l list_file    : each line contains a file name"
        print ""
        sys.exit(1)
    
    file_potential = None
    file_single = None
    file_list = None

    options,args = getopt(argv[1:], 'p:f:l:', [])
    for opt,val in options:
        if opt == '-p':
            file_potential = val
        elif opt == '-f':
            file_single = val
        elif opt == '-l':
            file_list = val
        else:
            print "Error: invalid option",opt
            sys.exit(1)
    assert len(args) == 0

    if file_potential is None:
        print "Error: '-p' is not given"
        sys.exit(1)
    if (file_single is None) and (file_list is None):
        print "Error: at least one of '-f, -l' is needed"
        sys.exit(1)

    inf = open(file_potential,'r')
    p = pickle.load(inf)
    inf.close()

    if file_single is not None:
        score_each(p, file_single)

    if file_list is not None:
        inf = open(file_list,"r")
        for line in inf:
            if line.strip()=="" or line.startswith("#"):
                continue
            score_each(p, line.strip())
        inf.close()


def score_each(p, infile):
    inf = open(infile, "r")
    line = inf.readline()
    if not line.startswith("atom type"):
        print "Error: invalid file",infile
        inf.close()
        return
    tmp_type = int(line.split()[-1])
    if tmp_type != p._type:
        print "Error: incompatible type, %d(potential) vs %d(infile)"%(p._type, tmp_type)
        inf.close()
        return 
    score = 0.
    for line in inf:
        if not line.startswith("PL"):
            continue
        temp = line.strip().split(",")
        dist = float(temp[-1])
        if dist >= pmf.Rmax:
            continue
        score += p.get_Aij_f(temp[1], temp[2], dist)
    inf.close()
    print "%s\t%.6f"%(infile, score)

main()

